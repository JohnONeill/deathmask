<style>
body {
    margin: 0;
}

#container:hover {
    cursor: move;
}
</style>

<%= javascript_include_tag "build/three.min.js" %>
<%= javascript_include_tag "globe/Three/Detector.js" %>
<%= javascript_include_tag "globe/Three/RequestAnimationFrame.js" %>

<div style="background: black;">
        
        <select style="position: absolute; top: 15px; left: 15px;" onchange="placeModel(this.value)">
            <option value="franklin" data-info=",0,-150,275,0,0,0,0,0,0">Benjamin Franklin</option>
            <option value="washington">George Washington</option>
            <option value="whitman">Walt Whitman</option>
            <option value="napoleon">Napoleon Bonaparte</option>
            <!-- <option value="thackery">William Thackery</option>-->
            <option value="thaxter">Celia Thaxter</option>
        </select>

		<div id="container"></div>
		<script>

			var camera, scene, renderer,
			particle1, particle2, particle2,
            targetRotationX = 0, targetRotationY = 0,
            targetRotationXOnMouseDown = 0, targetRotationYOnMouseDown = 0,
			loader, mesh;

            var windowHalfX = window.innerWidth / 2;
            var windowHalfY = window.innerHeight / 2;

			init();
			animate();

			function init() {

                windowHalfX = window.innerWidth / 2;
                windowHalfY = window.innerHeight / 2;

				var container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 0, -150, 275);

				scene = new THREE.Scene();

                var light = new THREE.SpotLight( 0xC0C0C0, 1.2 );
				light.position.set( 0, 500, 2000 );
				light.castShadow = true;

				light.shadowCameraNear = 200;
				light.shadowCameraFar = camera.far;
				light.shadowCameraFov = 50;

				light.shadowBias = -0.00022;
				light.shadowDarkness = 0.5;

				light.shadowMapWidth = 2048;
				light.shadowMapHeight = 2048;

				scene.add( light );

				var PI2 = Math.PI * 2;
				var program = function ( context ) {

					context.beginPath();
					context.arc( 0, 0, 1, 0, PI2, true );
					context.fill();

				}

				placeModel('franklin');

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setSize( window.innerWidth, window.innerHeight );
                renderer.domElement.addEventListener( 'mousedown', onDocumentMouseDown, false );
                renderer.domElement.addEventListener( 'touchstart', onDocumentTouchStart, false );
                renderer.domElement.addEventListener( 'touchmove', onDocumentTouchMove, false );

				container.appendChild( renderer.domElement );

				window.addEventListener( 'resize', onWindowResize, false );

			}

            function onDocumentMouseDown(event) {

                event.preventDefault();

                renderer.domElement.addEventListener( 'mousemove', onDocumentMouseMove, false );
                renderer.domElement.addEventListener( 'mouseup', onDocumentMouseUp, false );
                renderer.domElement.addEventListener( 'mouseout', onDocumentMouseOut, false );

                mouseXOnMouseDown = event.clientX - windowHalfX;
                mouseYOnMouseDown = event.clientY - windowHalfY;
                targetRotationXOnMouseDown = targetRotationX;
                targetRotationYOnMouseDown = targetRotationY;


            }

            function onDocumentMouseMove(event) {
            
                mouseX = event.clientX - windowHalfX;
                mouseY = event.clientY - windowHalfY;
            
                targetRotationX = targetRotationXOnMouseDown + (mouseX - mouseXOnMouseDown) * 0.02;
                targetRotationY = targetRotationYOnMouseDown + (mouseY - mouseYOnMouseDown) * 0.02;
            
            }
            
            function onDocumentMouseUp(event) {
            
                renderer.domElement.removeEventListener( 'mousemove', onDocumentMouseMove, false );
                renderer.domElement.removeEventListener( 'mouseup', onDocumentMouseUp, false );
                renderer.domElement.removeEventListener( 'mouseout', onDocumentMouseOut, false );
            
            }
            
            function onDocumentMouseOut(event) {
            
                renderer.domElement.removeEventListener( 'mousemove', onDocumentMouseMove, false );
                renderer.domElement.removeEventListener( 'mouseup', onDocumentMouseUp, false );
                renderer.domElement.removeEventListener( 'mouseout', onDocumentMouseOut, false );
            
            }
            
            function onDocumentTouchStart(event) {
            
                if (event.touches.length == 1) {
            
                	event.preventDefault();
            
                	mouseXOnMouseDown = event.touches[ 0 ].pageX - windowHalfX;
                	targetRotationXOnMouseDown = targetRotationX;
                    mouseYOnMouseDown = event.touches[ 0 ].pageY - windowHalfY;
                	targetRotationYOnMouseDown = targetRotationY;
            
                }
            
            }

            function onDocumentTouchMove(event) {
            
                if (event.touches.length == 1) {
            
                	event.preventDefault();
            
                	mouseX = event.touches[ 0 ].pageX - windowHalfX;
                	targetRotation = targetRotationOnMouseDown + (mouseX - mouseXOnMouseDown) * 0.05;
            
                }
            
            }

            function placeModel(filename) {

                // remove the last mask
                for(var i = 0; i < scene.children.length; ++i) {
                    if(scene.children[i] instanceof THREE.Mesh) {
                        scene.remove(scene.children[i]);
                        i--;
                    }
                }
                
                loader = new THREE.JSONLoader();
				loader.load( '../obj/'+filename+'.js', function ( geometry ) {

					geometry.computeVertexNormals();

					mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xffffff, overdraw: true } ) );
					scene.add( mesh );

				} );

            }

			function onWindowResize() {

                windowHalfX = window.innerWidth / 2;
                windowHalfY = window.innerHeight / 2;

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}
    
			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				//var time = Date.now() * 0.0005;
    
                //if (mesh) mesh.rotation.x += ( targetRotationY - mesh.rotation.x) * 0.05;

                if (mesh) mesh.rotation.y += ( targetRotationX - mesh.rotation.y) * 0.05;

				renderer.render( scene, camera );

			}

		</script>

</div>
</div>