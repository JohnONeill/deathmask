<h1>MaskViewer#home</h1>
<p>Find me in app/views/mask_viewer/home.html.erb</p>

<%= javascript_include_tag "build/three.min.js" %>
<%= javascript_include_tag "globe/Three/Detector.js" %>
<%= javascript_include_tag "globe/Three/RequestAnimationFrame.js" %>
<% 
=begin
    <script>
    
        var camera, scene, renderer;
        var geometry, material, mesh;
    
        init();
        animate();
    
        function init() {
    
            camera = new THREE.PerspectiveCamera( 75, window.innerWidth / window.innerHeight, 1, 10000 );
            camera.position.z = 1000;
    
            scene = new THREE.Scene();
    
            geometry = new THREE.CubeGeometry( 200, 200, 200 );
            material = new THREE.MeshBasicMaterial( { color: 0xff0000, wireframe: true } );
    
            mesh = new THREE.Mesh( geometry, material );
            scene.add( mesh );
    
            renderer = new THREE.CanvasRenderer();
            renderer.setSize( window.innerWidth, window.innerHeight );
    
            document.body.appendChild( renderer.domElement );
    
        }
    
        function animate() {
    
            // note: three.js includes requestAnimationFrame shim
            requestAnimationFrame( animate );
    
            mesh.rotation.x += 0.01;
            mesh.rotation.y += 0.02;
    
            renderer.render( scene, camera );
    
        }
    
    </script>
=end 
%>
		<div id="container"></div>
		<script>

			var camera, scene, renderer,
			particle1, particle2, particle2,
			light1, light2, light3,
			loader, mesh;

			init();
			animate();

			function init() {

				var container = document.getElementById( 'container' );

				camera = new THREE.PerspectiveCamera( 60, window.innerWidth / window.innerHeight, 1, 1000 );
				camera.position.set( 0, -6, 300 );

				scene = new THREE.Scene();

				scene.add( new THREE.AmbientLight( 0x00020 ) );

				light1 = new THREE.PointLight( 0xff0040, 1, 50 );
				scene.add( light1 );

				light2 = new THREE.PointLight( 0x0040ff, 1, 50 );
				scene.add( light2 );

				light3 = new THREE.PointLight( 0x80ff80, 1, 50 );
				scene.add( light3 );

				var PI2 = Math.PI * 2;
				var program = function ( context ) {

					context.beginPath();
					context.arc( 0, 0, 1, 0, PI2, true );
					context.fill();

				}

				loader = new THREE.JSONLoader();
				loader.load( '../obj/face.js', function ( geometry ) {

					geometry.computeVertexNormals();

					mesh = new THREE.Mesh( geometry, new THREE.MeshLambertMaterial( { color: 0xffffff, overdraw: true } ) );
					scene.add( mesh );

				} );

				renderer = new THREE.WebGLRenderer( { antialias: true } );
				renderer.setSize( window.innerWidth, window.innerHeight );
				container.appendChild( renderer.domElement );

				//

				window.addEventListener( 'resize', onWindowResize, false );

			}

			function onWindowResize() {

				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();

				renderer.setSize( window.innerWidth, window.innerHeight );

			}

			//

			function animate() {

				requestAnimationFrame( animate );

				render();

			}

			function render() {

				var time = Date.now() * 0.0005;

				if ( mesh ) mesh.rotation.y -= 0.01;

				renderer.render( scene, camera );

			}

		</script>

</div>